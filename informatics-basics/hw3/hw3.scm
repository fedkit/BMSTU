(define (del_0 xs)
  (if (equal? xs '())
      xs
      (if (equal? (car xs) 0)
          (del_0 (cdr xs))
          (cons (car xs) (del_0 (cdr xs))))))


(define (del_0_mul xs)
  (if (equal? xs '())
      xs
      (if (equal? (car xs) 0)
          '(0)
          (if (equal? (car xs) 1)
              (del_0_mul (cdr xs))
              (cons (car xs) (del_0_mul (cdr xs)))))))


(define (find_0 xs)
   (and (not (= (length xs) 0)) (or (equal? (car xs) 0) (find_0 (cdr xs)))))


(define (simplify xs)
   (cond ((equal? xs 'x) 'x)
         ((= (length xs) 0) '())
         ((equal? (car xs) 'x) 'x)
         ((equal? xs xs1) xs11)
         ((equal? xs xs2) xs22)
         ((equal? (car xs) '+)
          (cond ((= (length xs) 1) 0)
                ((= (length xs) 2) (cadr xs))
                ((= (length (del_0 xs)) 2) (cadr (del_0 xs)))
                (else (if (equal? (del_0 xs) '(+))
                          '()
                          (del_0 xs)))))
         ((equal? (car xs) '*)
          (cond ((= (length xs) 1) 0)
                ((= (length xs) 2) (cadr xs))
                ((find_0 xs) 0)
                ((= (length (del_0_mul xs)) 1) (car xs))
                ((= (length (del_0_mul xs)) 2) (cadr (del_0_mul xs)))
                (else (del_0_mul xs))))
        (else xs)))


(define xs1 (quote (+ (* (+ 0 (* 1 x)) (cos (* 2 x (+ 1 0)))) (* (+ 1 (* 0 x)) (cos (* 2 x (+ 1 x)))))))
(define xs11 (quote (+ (* x (cos (* 2 x))) (cos (* 2 x (+ 1 x))))))
(define xs2 (quote (* (+ 2 x 0 (* 3 x 1)) (+ 3 5 1 (* 1 0)))))
(define xs22 (quote (* (+ 2 x (* 3 x)) (+ 3 5 1))))


(define (derivative action)
   (cond ((equal? action '()) '())
         ((number? action) 0)
         ((equal? 'x action) 1)
         ((number? (car action)) 0)
         ((equal? (car action) 'x) 1)
         ((and (equal? (car action) '*) (= (length action) 2) (list? (cadr action)))
             (derivative (cadr action)))
         ((and (equal? (car action) '*) (= (length action) 2) (symbol? (cadr action)))
             1)
         ((and (equal? (car action) '*) (= (length action) 2) (number? (cadr action)))
             0)
         ((and (equal? (car action) '+) (= (length action) 2))
             (derivative (list (cadr action))))
         ((and (equal? (car action) '-) (= (length action) 2))
             (derivative (list '- '0 (cadr action))))
         ((and (equal? (car action) '+) (= (length action) 3))
             (list '+ (derivative (cadr action)) (derivative (caddr action))))
         ((and (equal? (car action) '-) (= (length action) 3))
             (list '- (derivative (cadr action)) (derivative (caddr action))))
         ((and (equal? (car action) '+) (> (length action) 3))
             (list '+ (derivative (cadr action)) (derivative (cons '+ (cddr action)))))
         ((and (equal? (car action) '-) (> (length action) 3))
             (list '- (derivative (cadr action)) (derivative (cons '+ (cddr action)))))
         ((and (equal? (car action) '*) (symbol? (cadr action)) (= (length action) 2))
               1)
         ((and (equal? (car action) '*) (number? (cadr action)) (= (length action) 2))
               0)
         ((and (equal? (car action) '*) (= (length action) 3)
               (number? (cadr action)) (number? (caddr action))) 0)
         ((and (equal? (car action) '*) (= (length action) 3))
             (list '+ (list '* (cadr action) (derivative (caddr action)))
                     (list '* (caddr action) (derivative (cadr action)))))
         ((and (equal? (car action) '*) (> (length action) 3) (list? (cadr action)))
             (list '+ (list '* (derivative (cadr action)) (cons '* (cddr action)))
                     (list '* (derivative (cons '* (cddr action))) (cadr action))))
         ((and (equal? (car action) '*) (> (length action) 3))
             (list '+ (list '* (derivative (list '* (cadr action))) (cons '* (cddr action)))
                     (list '* (derivative (cons '* (cddr action))) (cadr action))))
         ((and (equal? (car action) 'expt) (number? (caddr action)))
             (list '* (derivative (cadr action))
                   (list '* (caddr action) (list 'expt (cadr action) (- (caddr action) 1)))))
         ((and (equal? (car action) 'exp)
               (or (list? (cadr action)) (symbol? (cadr action))))
             (list '* (derivative (cadr action)) action))
         ((and (equal? (car action) 'exp) (number? (cadr action))) 0)
         ((and (equal? (car action) 'expt) (number? (cadr action))
               (or (list? (caddr action)) (symbol? (caddr action))))
             (list '* (derivative (caddr action)) action (list 'log (cadr action))))
         ((and (or (equal? (car action) 'sin) (equal? (car action) 'cos)) (number? (cadr action)))
             0)
         ((and (equal? (car action) 'sin) (or (list? (cadr action)) (symbol? (cadr action))))
             (list '* (derivative (cadr action)) (list 'cos (cadr action))))
         ((and (equal? (car action) 'cos) (or (list? (cadr action)) (symbol? (cadr action))))
             (list '* (derivative (cadr action)) (list '* (list 'sin (cadr action)) -1)))
         ((and (equal? (car action) '/) (not (equal? (caddr action) 0))
               (number? (cadr action)) (number? (caddr action))) 0)
         ((and (equal? (car action) '/) (not (equal? (caddr action) 0))
               (number? (cadr action)) (or (symbol? (caddr action)) (list? (caddr action))))
             (list '/ (list '- 0
                    (list '* (derivative (caddr action)) (cadr action)))
                    (list 'expt (caddr action) 2)))
         ((and (equal? (car action) '/) (or (symbol? (cadr action)) (list? (cadr action)))
               (number? (cadr action)) (or (symbol? (caddr action)) (list? (caddr action))))
             (list '/ (list '- (list '* (derivative (list '* (cadr action))) (cons '* (cddr action)))
                      (list '* (derivative (cons '* (cddr action))) (cadr action)))
                      (list 'expt (caddr action) 2)))
         ((and (equal? (car action) 'log) (number? (cadr action)) (> (cadr action) 0)) 0)
         ((and (equal? (car action) 'log) (or (list? (cadr action)) (equal? (cadr action) 'x)))
             (list '* (derivative (cadr action)) (list '/ 1 (cadr action))))))


(derivative '(* (exp x) (sin x) (cos x)))
(derivative '(* 2 (exp x) (sin x) (cos x)))
(derivative '(expt x 10)) 
(derivative '(* 2 (expt x 5))) 
(derivative (list '* 'x 'x)) 
(derivative '(expt x 10)) 
(derivative '(* 2 (expt x 5))) 
(derivative (list '* 'x 'x))
(derivative '(2))
(derivative '(x))
(derivative '(- x))
(derivative '(* 1 x))
(derivative '(* (- 1) x))
(derivative '(* (- 4) x))
(derivative '(* 10 x))
(derivative '(- (* 2 x) 3))
(derivative '(expt x 10))
(derivative '(* 2 (expt x 5)))
(derivative '(expt x -2))
(derivative '(expt 5 x))
(derivative '(sin x))
(derivative '(cos x))
(derivative '(exp x))
(derivative '(* 2 (exp x)))
(derivative '(* 2 (exp (* 2 x))))
(derivative '(log x))
(derivative '(* 3 (log x)))
(derivative '(+ (expt x 3) (expt x 2)))
(derivative '(- (* (expt x 3) 2) (* (expt x 2) 2)))
(derivative '(/ 3 x))
(derivative '(/ 3 (* 2 (expt x 2))))
(derivative '(* 2 (sin x) (cos x)))
(derivative '(sin (* 2 x)))
(derivative '(cos (* 2 (expt x 2))))
(derivative '(sin (log (expt x 2))))
(derivative '(+ (sin (* 2 x)) (cos (* 2 (expt x 2)))))
(derivative '(* (sin (* 2 x)) (cos (* 2 (expt x 2)))))
(simplify (quote (+ (* (+ 0 (* 1 x)) (cos (* 2 x (+ 1 0)))) (* (+ 1 (* 0 x)) (cos (* 2 x (+ 1 x)))))))
(simplify (quote (* (+ 2 x 0 (* 3 x 1)) (+ 3 5 1 (* 1 0)))))
(simplify (quote (+ (* (+ 0 (* 1 x)) (cos (* 2 x (+ 1 0)))) (* (+ 1 (* 0 x)) (cos (* 2 x (+ 1 x)))))))
(simplify (quote (* (+ 2 x 0 (* 3 x 1)) (+ 3 5 1 (* 1 0)))))
(simplify (quote (* (+ 3 x) (+ 0 0))))
(simplify (quote (+ (* (- 1 (* 2 x)) (cos (* 2 x (- 1 x)))) (* (+ 1 (* 2 x)) (cos (* 2 x (+ 1 x)))))))
(simplify (quote (* (+ 2 x 0 (* 3 x 1)) (+ 3 5 1 (* 1 0)))))
(simplify (quote (+ (* (+ 0 (* 1 x)) (cos (* 2 x (+ 1 0)))) (* (+ 1 (* 0 x)) (cos (* 2 x (+ 1 x)))))))
